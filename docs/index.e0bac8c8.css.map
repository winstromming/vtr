{"mappings":"AEyEA,oD,4DAQA,6EAIE,6CAGA,0D,uD,wCAaA,8CAGF,sE,+EAMA,uGAIA,6FC4GA,mF,kCAQA,yJAQE,oEAIA,+D,mDCvFF,iB,0DASA,6BAIE,gD,oFAQA,+BAEF,kDAEA,mDAKA,4HAMA,wDAIA","sources":["index.e0bac8c8.css","65d58f4db469f569","code/components/common/Dots.vue","code/components/sections/Health.vue","code/index.vue"],"sourcesContent":[".dots-input {\n  flex: 1;\n  background-color: #0000 !important;\n}\n\n.dots-input .n-input-wrapper {\n  padding-left: 0;\n  padding-right: 0;\n}\n\n.dots-input .n-input__border, .dots-input .n-input__state-border {\n  display: none;\n}\n\n.dots-input .n-input__input-el {\n  color: #c7664e;\n}\n\n.dots-check, .dots-input .n-input__prefix {\n  margin-right: 6px;\n}\n\n.dots-input .n-input__suffix {\n  flex-grow: 0;\n  flex-shrink: 0;\n}\n\n.dots-rate.n-rate {\n  vertical-align: middle;\n}\n\n.dots-rate.n-rate .n-rate__item {\n  margin-left: 0;\n}\n\n.dots-rate.n-rate .n-rate__item svg circle {\n  stroke: var(--n-text-color);\n}\n\n.n-input[color=\"true\"] .dots-rate.n-rate .n-rate__item svg circle {\n  stroke: #c7664e;\n}\n\n.dots-rate.n-rate .n-rate__item--active svg circle {\n  fill: var(--n-text-color);\n  stroke: var(--n-text-color);\n}\n\n.n-input[color=\"true\"] .dots-rate .n-rate__item--active svg circle {\n  fill: #c7664e;\n  stroke: #c7664e;\n}\n\n.health[data-v-b7f13b] {\n  background-color: var(--n-color);\n  min-width: 100%;\n  display: flex;\n}\n\n.health > div[data-v-b7f13b] {\n  flex: 1;\n}\n\n.health .n-button[data-v-b7f13b] {\n  flex-grow: 1;\n  flex-shrink: 1;\n  padding-left: 3px;\n  padding-right: 3px;\n  display: inline-flex;\n  border-color: var(--n-border) !important;\n}\n\n.health .n-button--disabled[data-v-b7f13b] {\n  opacity: 1;\n  cursor: default;\n}\n\n.health .n-button--disabled .n-icon[data-v-b7f13b] {\n  opacity: .25;\n}\n\n.healthgrid > div[data-v-b7f13b] {\n  justify-self: center;\n}\n\nhtml {\n  height: 100%;\n}\n\nbody {\n  background-color: #f7f3ee;\n  height: 100%;\n  overflow: hidden;\n}\n\n.bg {\n  background-color: #dfdfb6;\n}\n\n.n-layout {\n  background-color: #0000;\n  padding: 0 12px;\n}\n\n.sheet {\n  border: 3px double #d1a398;\n  max-width: 800px;\n  margin: 24px auto;\n  padding: 12px 24px;\n}\n\n.n-card {\n  background-color: #0000;\n}\n\n.n-card.n-card--embedded {\n  background-color: #f1eee9;\n}\n\n.n-card.n-card--bordered {\n  border: 3px double #d1a398;\n}\n\n.n-card .n-card-header {\n  margin-bottom: var(--n-padding-bottom);\n  border-bottom: 2px solid #d1a398;\n  padding-left: 0;\n  padding-right: 0;\n}\n\n.n-card > .n-card__content {\n  padding-left: 0;\n  padding-right: 0;\n}\n\n.n-card .n-card-header__main {\n  text-transform: uppercase;\n  font-family: Source Serif Pro, serif;\n  font-size: 16px;\n  font-weight: 700;\n  line-height: 18px;\n}\n/*# sourceMappingURL=index.e0bac8c8.css.map */\n","@import \"f7f0de3347d00068\";\n@import \"cc221696522de53d\";\n@import \"88c855560cc881f0\";\n@import \"6cbe46808f5407ac\";\n@import \"7581cde62dc8d159\";\n@import \"e33ecad49c160a85\";\n","<template>\r\n  <n-input class=\"dots-input\" size=\"small\" :readonly=\"props.isEditable === false\" type=\"text\" :value=\"props.label\"\r\n    :on-update:value=\"updateLabel\" :placeholder=\"props.placeholder ?? ''\" :color=\"props.color\">\r\n    <template #prefix v-if=\"props.name || props.checked !== undefined\">\r\n      <n-checkbox class=\"dots-check\" v-if=\"props.checked !== undefined\" size=\"small\" :disabled=\"props.checkedDisabled\"\r\n        v-model:checked=\"props.checked\" :on-update:checked=\"updateChecked\" />\r\n      <n-text v-if=\"props.name\" strong>{{ props.name }}</n-text>\r\n    </template>\r\n    <template #suffix v-if=\"props.dots !== undefined\">\r\n      <n-rate class=\"dots-rate\" size=\"small\" clearable :count=\"props.max\" v-model:value=\"props.dots\"\r\n        :on-update:value=\"updateDots\">\r\n        <n-icon :size=\"16\">\r\n          <Circle />\r\n        </n-icon>\r\n      </n-rate>\r\n    </template>\r\n  </n-input>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { Circle } from \"lucide-vue-next\";\r\n\r\nconst props = defineProps({\r\n  name: {\r\n    type: String,\r\n    default: undefined,\r\n  },\r\n  dots: {\r\n    type: Number,\r\n    default: undefined,\r\n  },\r\n  color: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  placeholder: {\r\n    type: String,\r\n    default: \"\",\r\n  },\r\n  label: {\r\n    type: String,\r\n    default: undefined,\r\n  },\r\n  isEditable: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  checked: {\r\n    type: Boolean,\r\n    default: undefined\r\n  },\r\n  checkedDisabled: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  max: {\r\n    type: Number,\r\n    default: 5,\r\n  }\r\n});\r\n\r\nconst emit = defineEmits<{\r\n  (event: \"updateDots\", dots: number): void;\r\n  (event: \"updateLabel\", label: string): void;\r\n  (event: \"updateChecked\", check: boolean): void;\r\n}>();\r\n\r\nconst updateDots = (dots: number) => emit(\"updateDots\", dots);\r\nconst updateLabel = (label: string) => emit(\"updateLabel\", label);\r\nconst updateChecked = (checked: boolean) => emit(\"updateChecked\", checked);\r\n</script>\r\n\r\n<style>\r\n.dots-input {\r\n  flex: 1;\r\n  background-color: transparent !important;\r\n}\r\n\r\n.dots-input .n-input-wrapper {\r\n  padding-left: 0;\r\n  padding-right: 0;\r\n}\r\n\r\n.dots-input .n-input__border,\r\n.dots-input .n-input__state-border {\r\n  display: none;\r\n}\r\n.dots-input .n-input__input-el {\r\n  color: #c7664e;\r\n}\r\n\r\n.dots-check {\r\n  margin-right: 6px\r\n}\r\n\r\n.dots-input .n-input__prefix {\r\n  margin-right: 6px;\r\n}\r\n\r\n.dots-input .n-input__suffix {\r\n  flex-shrink: 0;\r\n  flex-grow: 0;\r\n}\r\n\r\n.dots-rate.n-rate {\r\n  vertical-align: middle;\r\n}\r\n\r\n.dots-rate.n-rate .n-rate__item {\r\n  margin-left: 0;\r\n}\r\n\r\n.dots-rate.n-rate .n-rate__item svg circle {\r\n  stroke: var(--n-text-color);\r\n}\r\n.n-input[color=\"true\"] .dots-rate.n-rate .n-rate__item svg circle {\r\n  stroke: #c7664e;\r\n}\r\n\r\n.dots-rate.n-rate .n-rate__item--active svg circle {\r\n  fill: var(--n-text-color);\r\n  stroke: var(--n-text-color);\r\n}\r\n.n-input[color=\"true\"] .dots-rate .n-rate__item--active svg circle {\r\n  fill: #c7664e;\r\n  stroke: #c7664e;\r\n}\r\n</style>","<template>\r\n  <n-card title=\"Health\" :bordered=\"false\" size=\"small\">\r\n    <template #header-extra>\r\n        <n-popover trigger=\"click\" placement=\"top\">\r\n          <template #trigger>\r\n            <n-button text strong type=\"error\" title=\"Damage\">\r\n                Take Damage\r\n            </n-button>\r\n          </template>\r\n          <n-button-group vertical>\r\n            <n-button quaternary title=\"Aggravated\" type=\"error\" @click=\"sufferAggravated\">\r\n              Aggravated\r\n            </n-button>\r\n            <n-button quaternary title=\"Lethal\" type=\"error\" @click=\"sufferLethal\">\r\n              Lethal\r\n            </n-button>\r\n            <n-button quaternary title=\"Bashing\" type=\"error\" @click=\"sufferBashing\">\r\n              Bashing\r\n            </n-button>\r\n          </n-button-group>\r\n        </n-popover>\r\n    </template>\r\n    <n-space vertical size=\"small\">\r\n      <n-flex :size=\"5\" style=\"margin-bottom: 3px\">\r\n        <n-tooltip trigger=\"hover\" v-for=\"(amount, index) of character.health.aggravated\"\r\n          :disabled=\"character.health.lethal > 0 || index + 1 !== character.health.aggravated\">\r\n          <template #trigger>\r\n            <n-button :disabled=\"character.health.lethal > 0 || index + 1 !== character.health.aggravated\" text\r\n              @click=\"healDamage\">\r\n              <n-icon size=\"20\"><SquareAsterisk stroke-width=\"1.5\" /></n-icon>\r\n            </n-button>\r\n          </template>\r\n          Heal (1 week)\r\n        </n-tooltip>\r\n        <n-tooltip trigger=\"hover\" v-for=\"(amount, index) of character.health.lethal\"\r\n          :disabled=\"character.health.bashing > 0 || index + 1 !== character.health.lethal\">\r\n          <template #trigger>\r\n            <n-button :disabled=\"character.health.bashing > 0 || index + 1 !== character.health.lethal\" text\r\n              @click=\"healDamage\">\r\n              <n-icon size=\"20\"><SquareX stroke-width=\"1.5\" /></n-icon>\r\n            </n-button>\r\n          </template>\r\n          Heal (2 days)\r\n        </n-tooltip>\r\n        <n-tooltip trigger=\"hover\" v-for=\"(amount, index) of character.health.bashing\"\r\n          :disabled=\"index + 1 !== character.health.bashing\">\r\n          <template #trigger>\r\n            <n-button :disabled=\"index + 1 !== character.health.bashing\" text @click=\"healDamage\">\r\n              <n-icon size=\"20\"><SquareSlash stroke-width=\"1.5\" /></n-icon>\r\n            </n-button>\r\n          </template>\r\n          Heal (15 mins)\r\n        </n-tooltip>\r\n        <n-button v-for=\"amount in remaining\" disabled text>\r\n          <n-icon size=\"20\"><Square stroke-width=\"1.5\" /></n-icon>\r\n        </n-button>\r\n      </n-flex>\r\n      <n-alert type=\"warning\" v-if=\"summary\">\r\n        <n-text v-html=\"summary\" />\r\n      </n-alert>\r\n      <n-input-number v-model:value=\"character.traits.Willpower\" placeholder=\"0\" min=\"0\" :max=\"maxWillpower\"\r\n        :format=\"asWillpower\" :parse=\"parse\">\r\n        <template #prefix>\r\n          <n-text strong>Willpower</n-text>\r\n        </template>\r\n      </n-input-number>\r\n      <n-input-number v-model:value=\"character.traits.Vitae\" placeholder=\"0\" min=\"0\" :max=\"maxVitae\"\r\n        :format=\"asVitae\" :parse=\"parse\">\r\n        <template #prefix>\r\n          <n-text strong>Vitae</n-text>\r\n        </template>\r\n      </n-input-number>\r\n    </n-space>\r\n    </n-card>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { computed, onMounted, ref, watch } from \"vue\";\r\nimport { character } from \"../../store/store\";\r\nimport { ShieldPlus, SquareAsterisk, SquareSlash, SquareX, Square, Shield, Circle, Plus, Minus, Asterisk, X, Slash } from \"lucide-vue-next\"\r\n\r\nconst size = computed(() => {\r\n  let size = character.traits.Size.base ?? 0\r\n  if (character.traits.Size.modifier && character.traits.Size.modifier > 0) size = character.traits.Size.modifier\r\n  return size\r\n})\r\n\r\nconst resilience = computed(() => {\r\n  return character.disciplines.find(discipline => discipline.name.toLowerCase() === \"resilience\")?.dots ?? 0\r\n})\r\nconst asWillpower = (num: number | null) => {\r\n  return `${num ?? 0}/${maxWillpower.value}`\r\n}\r\nconst asVitae = (num: number | null) => {\r\n  return `${num ?? 0}/${maxVitae.value}`\r\n}\r\nconst parse = (input: string) => {\r\n  const nums = input.split(\"/\")[0].replace(/[^0-9]+/g, '').trim()\r\n  return nums === '' ? null : Number(nums)\r\n}\r\n\r\nconst maxWillpower = computed(() => {\r\n  return character.attributes.mental.Resolve.dots + character.attributes.social.Composure.dots;\r\n});\r\nconst maxVitae = computed(() => {\r\n  switch (character.traits.BloodPotency) {\r\n    case 1:\r\n      return 10;\r\n    case 2:\r\n      return 11;\r\n    case 3:\r\n      return 12;\r\n    case 4:\r\n      return 13;\r\n    case 5:\r\n      return 15;\r\n    case 6:\r\n      return 20;\r\n    case 7:\r\n      return 25;\r\n    case 8:\r\n      return 30;\r\n    case 9:\r\n      return 50;\r\n    case 10:\r\n      return 75;\r\n    default:\r\n      return 10;\r\n  }\r\n})\r\n\r\nwatch(character, () => {\r\n  character.health.maximum.base = size.value + character.attributes.physical.Stamina.dots + resilience.value\r\n});\r\n\r\nonMounted(() => {\r\n  character.health.maximum.base = size.value + character.attributes.physical.Stamina.dots + resilience.value\r\n})\r\n\r\n\r\nconst remaining = computed(() => {\r\n  let num = character.health.maximum.base - character.health.bashing - character.health.lethal - character.health.aggravated\r\n  return num < 0 ? 0 : num\r\n})\r\n\r\nconst healText = computed(() => {\r\n  if (character.health.bashing > 0) {\r\n    return \"Heal (15 mins)\";\r\n  } else if (character.health.lethal > 0) {\r\n    return \"Heal (2 days)\";\r\n  } else if (character.health.aggravated > 0) {\r\n    return \"Heal (1 week)\";\r\n  }\r\n})\r\n\r\nconst healDamage = () => {\r\n  if (character.health.bashing > 0) {\r\n    character.health.bashing -= 1;\r\n  } else if (character.health.lethal > 0) {\r\n    character.health.lethal -= 1;\r\n  } else if (character.health.aggravated > 0) {\r\n    character.health.aggravated -= 1;\r\n  }\r\n}\r\n\r\nconst sufferBashing = () => {\r\n  if (remaining.value === 0) {\r\n    if (character.health.bashing > 0) {\r\n      character.health.bashing -= 1;\r\n      character.health.lethal += 1;\r\n    } else if (character.health.lethal > 0) {\r\n      character.health.lethal -= 1;\r\n      character.health.aggravated += 1;\r\n    }\r\n  } else {\r\n    character.health.bashing += 1;\r\n  }\r\n}\r\nconst sufferLethal = () => {\r\n  if (remaining.value === 0) {\r\n    if (character.health.bashing > 0) {\r\n      character.health.bashing -= 1;\r\n      character.health.lethal += 1;\r\n    } else if (character.health.lethal > 0) {\r\n      character.health.lethal -= 1;\r\n      character.health.aggravated += 1;\r\n    }\r\n  } else {\r\n    character.health.lethal += 1;\r\n  }\r\n}\r\nconst sufferAggravated = () => {\r\n  if (remaining.value === 0) {\r\n    if (character.health.bashing > 0) {\r\n      character.health.bashing -= 1;\r\n      character.health.aggravated += 1;\r\n    } else if (character.health.lethal > 0) {\r\n      character.health.lethal -= 1;\r\n      character.health.aggravated += 1;\r\n    }\r\n  } else {\r\n    character.health.aggravated += 1;\r\n  }\r\n}\r\n\r\nconst summary = computed(() => {\r\n  let remaining = character.health.maximum.base - character.health.bashing - character.health.lethal - character.health.aggravated;\r\n  if (character.health.aggravated >= character.health.maximum.base) return \"You are dead.\";\r\n  if (remaining > 2) return null\r\n  let string = [];\r\n  if (remaining === 0 && character.health.bashing === 0 && character.health.lethal > 0) string.push(\"You receive one point damage each turn and\");\r\n  if (remaining === 0 && character.health.bashing > 0) string.push(\"You must make roll to stay conscious each turn and\");\r\n  if (remaining === 0) string.push(\"suffer -3 penalty on every action.\");\r\n  if (remaining === 1) string.push(\"You suffer -2 penalty on every action.\");\r\n  if (remaining === 2) string.push(\"You suffer -1 penalty on every action.\");\r\n  if (string.length === 0) return null;\r\n  return string.join(\" \");\r\n})\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.health {\r\n  display: flex;\r\n  min-width: 100%;\r\n  background-color: var(--n-color);\r\n}\r\n\r\n.health>div {\r\n  flex: 1\r\n}\r\n\r\n.health .n-button {\r\n  flex-grow: 1;\r\n  flex-shrink: 1;\r\n  display: inline-flex;\r\n  padding-left: 3px;\r\n  padding-right: 3px;\r\n  border-color: var(--n-border) !important;\r\n}\r\n\r\n.health .n-button--disabled {\r\n  opacity: 1;\r\n  cursor: default;\r\n}\r\n\r\n.health .n-button--disabled .n-icon {\r\n  opacity: 0.25;\r\n}\r\n.healthgrid > div {\r\n  justify-self: center;\r\n  /* align-items: center;\r\n  justify-content: center;\r\n  display: flex; */\r\n}\r\n</style>\r\n<!-- \r\n<template>\r\n    <n-space vertical>\r\n      <n-button-group class=\"health\">\r\n        <n-popover trigger=\"click\" placement=\"top\">\r\n          <template #trigger>\r\n            <n-button type=\"error\" size=\"small\" title=\"Suffer damage\">\r\n              <template #icon>\r\n                <n-icon :component=\"ShieldPlus\" />\r\n              </template>\r\n            </n-button>\r\n          </template>\r\n          <n-button title=\"Aggravated\" quaternary type=\"error\" size=\"small\" @click=\"sufferAggravated\">\r\n            <template #icon>\r\n              <n-icon :component=\"SquareAsterisk\" />\r\n            </template>\r\n          </n-button>\r\n          <n-button title=\"Lethal\" quaternary type=\"error\" size=\"small\" @click=\"sufferLethal\">\r\n            <template #icon>\r\n              <n-icon :component=\"SquareX\" />\r\n            </template>\r\n          </n-button>\r\n          <n-button title=\"Bashing\" quaternary type=\"error\" size=\"small\" @click=\"sufferBashing\">\r\n            <template #icon>\r\n              <n-icon :component=\"SquareSlash\" />\r\n            </template>\r\n          </n-button>\r\n        </n-popover>\r\n        <n-tooltip trigger=\"hover\" v-for=\"(amount, index) of character.health.aggravated\"\r\n          :disabled=\"character.health.lethal > 0 || index + 1 !== character.health.aggravated\">\r\n          <template #trigger>\r\n            <n-button :disabled=\"character.health.lethal > 0 || index + 1 !== character.health.aggravated\" size=\"small\"\r\n              @click=\"healDamage\">\r\n              <template #icon>\r\n                <n-icon :component=\"SquareAsterisk\" />\r\n              </template>\r\n            </n-button>\r\n          </template>\r\n          Heal (1 week)\r\n        </n-tooltip>\r\n        <n-tooltip trigger=\"hover\" v-for=\"(amount, index) of character.health.lethal\"\r\n          :disabled=\"character.health.bashing > 0 || index + 1 !== character.health.lethal\">\r\n          <template #trigger>\r\n            <n-button :disabled=\"character.health.bashing > 0 || index + 1 !== character.health.lethal\" size=\"small\"\r\n              @click=\"healDamage\">\r\n              <template #icon>\r\n                <n-icon :component=\"SquareX\" />\r\n              </template>\r\n            </n-button>\r\n          </template>\r\n          Heal (2 days)\r\n        </n-tooltip>\r\n        <n-tooltip trigger=\"hover\" v-for=\"(amount, index) of character.health.bashing\"\r\n          :disabled=\"index + 1 !== character.health.bashing\">\r\n          <template #trigger>\r\n            <n-button :disabled=\"index + 1 !== character.health.bashing\" size=\"small\" @click=\"healDamage\">\r\n              <template #icon>\r\n                <n-icon :component=\"SquareSlash\" />\r\n              </template>\r\n            </n-button>\r\n          </template>\r\n          Heal (15 mins)\r\n        </n-tooltip>\r\n        <n-button v-for=\"amount in remaining\" disabled size=\"small\">\r\n          <template #icon>\r\n            <n-icon :component=\"Square\" />\r\n          </template>\r\n        </n-button>\r\n      </n-button-group>\r\n      <n-alert type=\"warning\" v-if=\"summary\">\r\n        <n-text v-html=\"summary\" />\r\n      </n-alert>\r\n    </n-space>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { computed, onMounted, watch } from \"vue\";\r\nimport { character } from \"../store/store\";\r\nimport { ShieldPlus, SquareAsterisk, SquareSlash, SquareX, Square } from \"lucide-vue-next\"\r\n\r\nconst size = computed(() => {\r\n  let size = character.traits.Size.base ?? 0\r\n  if (character.traits.Size.modifier && character.traits.Size.modifier > 0) size = character.traits.Size.modifier\r\n  return size\r\n})\r\n\r\nwatch(character, () => {\r\n  character.health.maximum.base = size.value + character.attributes.physical.Stamina.dots + character.disciplines.Resilience.dots\r\n});\r\n\r\nonMounted(() => {\r\n  character.health.maximum.base = size.value + character.attributes.physical.Stamina.dots + character.disciplines.Resilience.dots\r\n})\r\n\r\n\r\nconst remaining = computed(() => {\r\n  let num = character.health.maximum.base - character.health.bashing - character.health.lethal - character.health.aggravated\r\n  return num < 0 ? 0 : num\r\n})\r\n\r\nconst healDamage = () => {\r\n  if (character.health.bashing > 0) {\r\n    character.health.bashing -= 1;\r\n  } else if (character.health.lethal > 0) {\r\n    character.health.lethal -= 1;\r\n  } else if (character.health.aggravated > 0) {\r\n    character.health.aggravated -= 1;\r\n  }\r\n}\r\n\r\nconst sufferBashing = () => {\r\n  if (remaining.value === 0) {\r\n    if (character.health.bashing > 0) {\r\n      character.health.bashing -= 1;\r\n      character.health.lethal += 1;\r\n    } else if (character.health.lethal > 0) {\r\n      character.health.lethal -= 1;\r\n      character.health.aggravated += 1;\r\n    }\r\n  } else {\r\n    character.health.bashing += 1;\r\n  }\r\n}\r\nconst sufferLethal = () => {\r\n  if (remaining.value === 0) {\r\n    if (character.health.bashing > 0) {\r\n      character.health.bashing -= 1;\r\n      character.health.lethal += 1;\r\n    } else if (character.health.lethal > 0) {\r\n      character.health.lethal -= 1;\r\n      character.health.aggravated += 1;\r\n    }\r\n  } else {\r\n    character.health.lethal += 1;\r\n  }\r\n}\r\nconst sufferAggravated = () => {\r\n  if (remaining.value === 0) {\r\n    if (character.health.bashing > 0) {\r\n      character.health.bashing -= 1;\r\n      character.health.aggravated += 1;\r\n    } else if (character.health.lethal > 0) {\r\n      character.health.lethal -= 1;\r\n      character.health.aggravated += 1;\r\n    }\r\n  } else {\r\n    character.health.aggravated += 1;\r\n  }\r\n}\r\n\r\nconst summary = computed(() => {\r\n  let remaining = character.attributes.physical.Stamina.dots + size.value - character.health.bashing - character.health.lethal - character.health.aggravated;\r\n  if (character.health.aggravated >= character.health.maximum.base) return \"You are dead.\";\r\n  if (remaining > 2) return null\r\n  let string = [];\r\n  if (remaining === 0 && character.health.bashing === 0 && character.health.lethal > 0) string.push(\"You receive one point damage each turn and\");\r\n  if (remaining === 0 && character.health.bashing > 0) string.push(\"You must make roll to stay conscious each turn and\");\r\n  if (remaining === 0) string.push(\"suffer -3 penalty on every action.\");\r\n  if (remaining === 1) string.push(\"You suffer -2 penalty on every action.\");\r\n  if (remaining === 2) string.push(\"You suffer -1 penalty on every action.\");\r\n  if (string.length === 0) return null;\r\n  return string.join(\" \");\r\n})\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.health {\r\n  display: flex;\r\n  min-width: 100%;\r\n  background-color: var(--n-color);\r\n}\r\n\r\n.health>div {\r\n  flex: 1\r\n}\r\n\r\n.health .n-button {\r\n  flex-grow: 1;\r\n  flex-shrink: 1;\r\n  display: inline-flex;\r\n  padding-left: 3px;\r\n  padding-right: 3px;\r\n  border-color: var(--n-border) !important;\r\n}\r\n\r\n.health .n-button--disabled {\r\n  opacity: 1;\r\n  cursor: default;\r\n}\r\n\r\n.health .n-button--disabled .n-icon {\r\n  opacity: 0.25;\r\n}\r\n</style> -->","<template>\r\n  <n-message-provider>\r\n    <n-dialog-provider>\r\n      <n-config-provider :theme-overrides=\"overrides\">\r\n        <n-layout position=\"absolute\" embedded>\r\n          <!-- <n-layout-header position=\"absolute\" style=\"z-index: 10\">\r\n            <n-button @click=\"save\">Save</n-button>\r\n            <n-upload :show-file-list=\"false\" accept=\".pdf\" :custom-request=\"imports\">\r\n              <n-button size=\"small\" type=\"warning\" quaternary>\r\n                Import\r\n              </n-button>\r\n            </n-upload>\r\n          </n-layout-header> -->\r\n          <n-layout-content position=\"absolute\" embedded>\r\n            <n-flex justify=\"space-between\" style=\"margin: 24px auto 0; padding: 0; max-width: 800px;\">\r\n              <n-space>\r\n                <LoadButton />\r\n                <SaveButton />\r\n              </n-space>\r\n              <ClearButton />\r\n            </n-flex>\r\n            <div class=\"sheet\">\r\n              <n-space vertical size=\"large\">\r\n                <Character />\r\n                <Attributes />\r\n                <Skills />\r\n                <n-grid y-gap=\"12\" x-gap=\"24\" cols=\"1 700:3\">\r\n                  <n-gi>\r\n                    <Health />\r\n                    <Traits />\r\n                    <Banes />\r\n                    <Touchstones />\r\n                  </n-gi>\r\n                  <n-gi>\r\n                    <Disciplines />\r\n                    <Merits />\r\n                    <Rites />\r\n                    <Devotions />\r\n                  </n-gi>\r\n                  <n-gi>\r\n                    <Advancement />\r\n                    <Conditions />\r\n                  </n-gi>\r\n                </n-grid>\r\n              </n-space>\r\n            </div>\r\n            <div class=\"sheet\">\r\n              <Information />\r\n              <Descriptions />\r\n            </div>\r\n          </n-layout-content>\r\n        </n-layout>\r\n      </n-config-provider>\r\n    </n-dialog-provider>\r\n  </n-message-provider>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { jsPDF } from \"jspdf\";\r\nimport PDFParser from \"pdf2json\";\r\nimport extractTextFromPDF from \"pdf-parser-client-side\";\r\n\r\nconst parser = new PDFParser();\r\n\r\nimport { watch, toRaw, onBeforeMount } from \"vue\";\r\nimport { assign, cloneDeep } from \"lodash\";\r\n\r\nimport { character } from \"./store/store\";\r\n\r\nimport type { GlobalThemeOverrides, UploadCustomRequestOptions, } from \"naive-ui\";\r\nimport Attributes from \"./components/sections/Attributes.vue\";\r\nimport Character from \"./components/sections/Character.vue\";\r\nimport Skills from \"./components/sections/Skills.vue\";\r\nimport Banes from \"./components/sections/Banes.vue\";\r\nimport Health from \"./components/sections/Health.vue\";\r\nimport Traits from \"./components/sections/Traits.vue\";\r\nimport Disciplines from \"./components/sections/Disciplines.vue\";\r\nimport Merits from \"./components/sections/Merits.vue\";\r\nimport Touchstones from \"./components/sections/Touchstones.vue\";\r\nimport Conditions from \"./components/sections/Conditions.vue\";\r\nimport Advancement from \"./components/sections/Advancement.vue\";\r\nimport Rites from \"./components/sections/Rites.vue\";\r\nimport Devotions from \"./components/sections/Devotions.vue\";\r\nimport Information from \"./components/sections/Information.vue\";\r\nimport Descriptions from \"./components/sections/Descriptions.vue\";\r\nimport SaveButton from \"./components/menu/SaveButton.vue\";\r\nimport LoadButton from \"./components/menu/LoadButton.vue\";\r\nimport ClearButton from \"./components/menu/ClearButton.vue\";\r\n\r\nconst overrides: GlobalThemeOverrides = { \r\n  common: {\r\n    fontWeightStrong: \"600\",\r\n    primaryColor: \"#d1a398\",\r\n    primaryColorHover: \"#d1a398\",\r\n  },\r\n  Input: {\r\n    border: \"1px solid #ccc\",\r\n  }\r\n}\r\nconst d = (n: number, t: number) => Array.from({ length: n }, () => \"●\").concat(Array.from({ length: t - n }, () => \"○\")).join(\"\")\r\n  \r\nconst save = () => {\r\n  const doc = new jsPDF({ orientation: \"portrait\", unit: \"mm\", format: \"a4\" });\r\n  doc.text(\"Name: \" + character.details.name + \" is \\n my name\", 105, 10, { align: \"center\" });\r\n  doc.text(\"Virtue: \" + character.details.mask, 105, 20, { align: \"center\" });\r\n  doc.text(\"Vice: \" + character.details.dirge, 105, 30, { align: \"center\" });\r\n  doc.text(\"Concept: \" + character.details.concept, 105, 40, { align: \"center\" });\r\n\r\n// doc.html(document.body, {\r\n//    callback: function (doc) {\r\n//      doc.save();\r\n//    },\r\n//    x: 0,\r\n//   y: 0,\r\n//   width: 400,\r\n//    windowWidth: 800,\r\n// });\r\n  doc.save(`${character.details.name || \"character\"}.pdf`);\r\n}\r\n\r\nparser.on(\"pdfParser_dataError\", (errorData) => {\r\n  console.log('pdfdata', errorData)\r\n  console.error(errorData.parserError)\r\n});\r\nparser.on(\"pdfParser_dataReady\", (pdfData) => {\r\n  console.log('pdfdata', pdfData)\r\n  console.log(parser.getRawTextContent())\r\n});\r\n\r\nconst imports = async ({\r\n  file,\r\n  data,\r\n  onProgress,\r\n  onFinish,\r\n  onError,\r\n}: UploadCustomRequestOptions) => {\r\n  extractTextFromPDF(file.file as File, \"clean\").then((text) => {\r\n    console.log(text)\r\n  })\r\n}\r\n\r\n\r\nonBeforeMount(() => {\r\n  const hasCharacter = JSON.parse(localStorage.getItem(\"vtr\") ?? \"null\")\r\n  if (hasCharacter) assign(character, hasCharacter)\r\n})\r\n\r\nwatch(character, () => {\r\n  const raw = cloneDeep(toRaw(character))\r\n  localStorage.setItem(\"vtr\", JSON.stringify(raw));\r\n})\r\n\r\n</script>\r\n\r\n<style>\r\nhtml {\r\n  height: 100%;\r\n}\r\n\r\nbody {\r\n  height: 100%;\r\n  overflow: hidden;\r\n  background-color: #f7f3ee;\r\n  /* background-color: var(--n-color-bg-base); */\r\n}\r\n\r\n.bg {\r\n  background-color: rgb(223, 223, 182);\r\n  /* background-color: var(--n-color-bg-base); */\r\n}\r\n\r\n.n-layout { background-color: transparent; padding: 0 12px; }\r\n.sheet {\r\n  max-width: 800px;\r\n  margin: 24px auto;\r\n  padding: 12px 24px;\r\n  border: 3px double #d1a398;\r\n}\r\n.n-card { background-color: transparent }\r\n.n-card.n-card--embedded { background-color: #f1eee9; }\r\n.n-card.n-card--bordered {\r\n  border-color: #d1a398;\r\n  border-width: 3px;\r\n  border-style: double;\r\n}\r\n.n-card .n-card-header {\r\n  border-bottom: 2px solid #d1a398;\r\n  padding-left: 0;\r\n  padding-right: 0;\r\n  margin-bottom: var(--n-padding-bottom);\r\n}\r\n.n-card > .n-card__content {\r\n  padding-left: 0;\r\n  padding-right: 0;\r\n}\r\n.n-card .n-card-header__main {\r\n  font-family: \"Source Serif Pro\", serif;\r\n  font-size: 16px;\r\n  line-height: 18px;\r\n  font-weight: 700;\r\n  text-transform: uppercase;\r\n  /* color: #9d4e3a !important; */\r\n}\r\n\r\n</style>\r\n"],"names":[],"version":3,"file":"index.e0bac8c8.css.map"}